#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Mon Sep 30 15:46:50 2019 by generateDS.py version 2.33.6.
# Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)]
#
# Command line options:
#   ('-o', 'PortInterfaces_api.py')
#
# Command line arguments:
#   PortInterfaces.xsd
#
# Command line:
#   generateDS.py -o "PortInterfaces_api.py" PortInterfaces.xsd
#
# Current working directory (os.getcwd()):
#   generateDS-2.33.6
#

import os
import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
import decimal as decimal_
import pandas as pd
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# The super-class for enum types
#

try:
    from enum import Enum
except ImportError:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'requires integer: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'requires float or double: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires sequence of floats')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return ('%0.10f' % input_data).rstrip('0')
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'requires float or double: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'requires boolean')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class ELEMENTS(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SENDER_RECEIVER_INTERFACE=None, CLIENT_SERVER_INTERFACE=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SENDER_RECEIVER_INTERFACE is None:
            self.SENDER_RECEIVER_INTERFACE = []
        else:
            self.SENDER_RECEIVER_INTERFACE = SENDER_RECEIVER_INTERFACE
        self.SENDER_RECEIVER_INTERFACE_nsprefix_ = None
        if CLIENT_SERVER_INTERFACE is None:
            self.CLIENT_SERVER_INTERFACE = []
        else:
            self.CLIENT_SERVER_INTERFACE = CLIENT_SERVER_INTERFACE
        self.CLIENT_SERVER_INTERFACE_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ELEMENTS)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ELEMENTS.subclass:
            return ELEMENTS.subclass(*args_, **kwargs_)
        else:
            return ELEMENTS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SENDER_RECEIVER_INTERFACE(self):
        return self.SENDER_RECEIVER_INTERFACE
    def set_SENDER_RECEIVER_INTERFACE(self, SENDER_RECEIVER_INTERFACE):
        self.SENDER_RECEIVER_INTERFACE = SENDER_RECEIVER_INTERFACE
    def add_SENDER_RECEIVER_INTERFACE(self, value):
        self.SENDER_RECEIVER_INTERFACE.append(value)
    def insert_SENDER_RECEIVER_INTERFACE_at(self, index, value):
        self.SENDER_RECEIVER_INTERFACE.insert(index, value)
    def replace_SENDER_RECEIVER_INTERFACE_at(self, index, value):
        self.SENDER_RECEIVER_INTERFACE[index] = value
    def get_CLIENT_SERVER_INTERFACE(self):
        return self.CLIENT_SERVER_INTERFACE
    def set_CLIENT_SERVER_INTERFACE(self, CLIENT_SERVER_INTERFACE):
        self.CLIENT_SERVER_INTERFACE = CLIENT_SERVER_INTERFACE
    def add_CLIENT_SERVER_INTERFACE(self, value):
        self.CLIENT_SERVER_INTERFACE.append(value)
    def insert_CLIENT_SERVER_INTERFACE_at(self, index, value):
        self.CLIENT_SERVER_INTERFACE.insert(index, value)
    def replace_CLIENT_SERVER_INTERFACE_at(self, index, value):
        self.CLIENT_SERVER_INTERFACE[index] = value
    def hasContent_(self):
        if (
            self.SENDER_RECEIVER_INTERFACE or
            self.CLIENT_SERVER_INTERFACE
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='ELEMENTS', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ELEMENTS')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ELEMENTS')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ELEMENTS', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ELEMENTS'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='ELEMENTS', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SENDER_RECEIVER_INTERFACE_ in self.SENDER_RECEIVER_INTERFACE:
            namespaceprefix_ = self.SENDER_RECEIVER_INTERFACE_nsprefix_ + ':' if (UseCapturedNS_ and self.SENDER_RECEIVER_INTERFACE_nsprefix_) else ''
            SENDER_RECEIVER_INTERFACE_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SENDER-RECEIVER-INTERFACE', pretty_print=pretty_print)
        for CLIENT_SERVER_INTERFACE_ in self.CLIENT_SERVER_INTERFACE:
            namespaceprefix_ = self.CLIENT_SERVER_INTERFACE_nsprefix_ + ':' if (UseCapturedNS_ and self.CLIENT_SERVER_INTERFACE_nsprefix_) else ''
            CLIENT_SERVER_INTERFACE_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CLIENT-SERVER-INTERFACE', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SENDER-RECEIVER-INTERFACE':
            obj_ = SENDER_RECEIVER_INTERFACEType.factory(parent_object_=self)
            obj_.build(child_)
            self.SENDER_RECEIVER_INTERFACE.append(obj_)
            obj_.original_tagname_ = 'SENDER-RECEIVER-INTERFACE'
        elif nodeName_ == 'CLIENT-SERVER-INTERFACE':
            obj_ = CLIENT_SERVER_INTERFACEType.factory(parent_object_=self)
            obj_.build(child_)
            self.CLIENT_SERVER_INTERFACE.append(obj_)
            obj_.original_tagname_ = 'CLIENT-SERVER-INTERFACE'
# end class ELEMENTS


class SW_DATA_DEF_PROPS(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SW_DATA_DEF_PROPS_VARIANTS=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SW_DATA_DEF_PROPS_VARIANTS is None:
            self.SW_DATA_DEF_PROPS_VARIANTS = []
        else:
            self.SW_DATA_DEF_PROPS_VARIANTS = SW_DATA_DEF_PROPS_VARIANTS
        self.SW_DATA_DEF_PROPS_VARIANTS_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SW_DATA_DEF_PROPS)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SW_DATA_DEF_PROPS.subclass:
            return SW_DATA_DEF_PROPS.subclass(*args_, **kwargs_)
        else:
            return SW_DATA_DEF_PROPS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SW_DATA_DEF_PROPS_VARIANTS(self):
        return self.SW_DATA_DEF_PROPS_VARIANTS
    def set_SW_DATA_DEF_PROPS_VARIANTS(self, SW_DATA_DEF_PROPS_VARIANTS):
        self.SW_DATA_DEF_PROPS_VARIANTS = SW_DATA_DEF_PROPS_VARIANTS
    def add_SW_DATA_DEF_PROPS_VARIANTS(self, value):
        self.SW_DATA_DEF_PROPS_VARIANTS.append(value)
    def insert_SW_DATA_DEF_PROPS_VARIANTS_at(self, index, value):
        self.SW_DATA_DEF_PROPS_VARIANTS.insert(index, value)
    def replace_SW_DATA_DEF_PROPS_VARIANTS_at(self, index, value):
        self.SW_DATA_DEF_PROPS_VARIANTS[index] = value
    def hasContent_(self):
        if (
            self.SW_DATA_DEF_PROPS_VARIANTS
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='SW-DATA-DEF-PROPS', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SW-DATA-DEF-PROPS')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SW-DATA-DEF-PROPS')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SW-DATA-DEF-PROPS', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SW-DATA-DEF-PROPS'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='SW-DATA-DEF-PROPS', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SW_DATA_DEF_PROPS_VARIANTS_ in self.SW_DATA_DEF_PROPS_VARIANTS:
            namespaceprefix_ = self.SW_DATA_DEF_PROPS_VARIANTS_nsprefix_ + ':' if (UseCapturedNS_ and self.SW_DATA_DEF_PROPS_VARIANTS_nsprefix_) else ''
            SW_DATA_DEF_PROPS_VARIANTS_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SW-DATA-DEF-PROPS-VARIANTS', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SW-DATA-DEF-PROPS-VARIANTS':
            obj_ = SW_DATA_DEF_PROPS_VARIANTSType.factory(parent_object_=self)
            obj_.build(child_)
            self.SW_DATA_DEF_PROPS_VARIANTS.append(obj_)
            obj_.original_tagname_ = 'SW-DATA-DEF-PROPS-VARIANTS'
# end class SW_DATA_DEF_PROPS


class TYPE_TREF(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DEST=None, valueOf_=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DEST = _cast(None, DEST)
        self.DEST_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TYPE_TREF)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TYPE_TREF.subclass:
            return TYPE_TREF.subclass(*args_, **kwargs_)
        else:
            return TYPE_TREF(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DEST(self):
        return self.DEST
    def set_DEST(self, DEST):
        self.DEST = DEST
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0"', name_='TYPE-TREF', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TYPE-TREF')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TYPE-TREF')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TYPE-TREF', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TYPE-TREF'):
        if self.DEST is not None and 'DEST' not in already_processed:
            already_processed.add('DEST')
            outfile.write(' DEST=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DEST), input_name='DEST')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0"', name_='TYPE-TREF', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DEST', node)
        if value is not None and 'DEST' not in already_processed:
            already_processed.add('DEST')
            self.DEST = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TYPE_TREF


class AUTOSAR(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ELEMENTS=None, SW_DATA_DEF_PROPS=None, TYPE_TREF=None, AR_PACKAGE_MY=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ELEMENTS is None:
            self.ELEMENTS = []
        else:
            self.ELEMENTS = ELEMENTS
        self.ELEMENTS_nsprefix_ = None
        if SW_DATA_DEF_PROPS is None:
            self.SW_DATA_DEF_PROPS = []
        else:
            self.SW_DATA_DEF_PROPS = SW_DATA_DEF_PROPS
        self.SW_DATA_DEF_PROPS_nsprefix_ = None
        if TYPE_TREF is None:
            self.TYPE_TREF = []
        else:
            self.TYPE_TREF = TYPE_TREF
        self.TYPE_TREF_nsprefix_ = None
        if AR_PACKAGE_MY is None:
            self.AR_PACKAGE_MY = []
        else:
            self.AR_PACKAGE_MY = AR_PACKAGE_MY
        self.AR_PACKAGE_MY_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AUTOSAR)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AUTOSAR.subclass:
            return AUTOSAR.subclass(*args_, **kwargs_)
        else:
            return AUTOSAR(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ELEMENTS(self):
        return self.ELEMENTS
    def set_ELEMENTS(self, ELEMENTS):
        self.ELEMENTS = ELEMENTS
    def add_ELEMENTS(self, value):
        self.ELEMENTS.append(value)
    def insert_ELEMENTS_at(self, index, value):
        self.ELEMENTS.insert(index, value)
    def replace_ELEMENTS_at(self, index, value):
        self.ELEMENTS[index] = value
    def get_SW_DATA_DEF_PROPS(self):
        return self.SW_DATA_DEF_PROPS
    def set_SW_DATA_DEF_PROPS(self, SW_DATA_DEF_PROPS):
        self.SW_DATA_DEF_PROPS = SW_DATA_DEF_PROPS
    def add_SW_DATA_DEF_PROPS(self, value):
        self.SW_DATA_DEF_PROPS.append(value)
    def insert_SW_DATA_DEF_PROPS_at(self, index, value):
        self.SW_DATA_DEF_PROPS.insert(index, value)
    def replace_SW_DATA_DEF_PROPS_at(self, index, value):
        self.SW_DATA_DEF_PROPS[index] = value
    def get_TYPE_TREF(self):
        return self.TYPE_TREF
    def set_TYPE_TREF(self, TYPE_TREF):
        self.TYPE_TREF = TYPE_TREF
    def add_TYPE_TREF(self, value):
        self.TYPE_TREF.append(value)
    def insert_TYPE_TREF_at(self, index, value):
        self.TYPE_TREF.insert(index, value)
    def replace_TYPE_TREF_at(self, index, value):
        self.TYPE_TREF[index] = value
    def get_AR_PACKAGE_MY(self):
        return self.AR_PACKAGE_MY
    def set_AR_PACKAGE_MY(self, AR_PACKAGE_MY):
        self.AR_PACKAGE_MY = AR_PACKAGE_MY
    def add_AR_PACKAGE_MY(self, value):
        self.AR_PACKAGE_MY.append(value)
    def insert_AR_PACKAGE_MY_at(self, index, value):
        self.AR_PACKAGE_MY.insert(index, value)
    def replace_AR_PACKAGE_MY_at(self, index, value):
        self.AR_PACKAGE_MY[index] = value
    def hasContent_(self):
        if (
            self.ELEMENTS or
            self.SW_DATA_DEF_PROPS or
            self.TYPE_TREF or
            self.AR_PACKAGE_MY
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='AUTOSAR', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AUTOSAR')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AUTOSAR')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AUTOSAR', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AUTOSAR'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='AUTOSAR', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ELEMENTS_ in self.ELEMENTS:
            namespaceprefix_ = self.ELEMENTS_nsprefix_ + ':' if (UseCapturedNS_ and self.ELEMENTS_nsprefix_) else ''
            ELEMENTS_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ELEMENTS', pretty_print=pretty_print)
        for SW_DATA_DEF_PROPS_ in self.SW_DATA_DEF_PROPS:
            namespaceprefix_ = self.SW_DATA_DEF_PROPS_nsprefix_ + ':' if (UseCapturedNS_ and self.SW_DATA_DEF_PROPS_nsprefix_) else ''
            SW_DATA_DEF_PROPS_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SW-DATA-DEF-PROPS', pretty_print=pretty_print)
        for TYPE_TREF_ in self.TYPE_TREF:
            namespaceprefix_ = self.TYPE_TREF_nsprefix_ + ':' if (UseCapturedNS_ and self.TYPE_TREF_nsprefix_) else ''
            TYPE_TREF_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TYPE-TREF', pretty_print=pretty_print)
        for AR_PACKAGE_MY_ in self.AR_PACKAGE_MY:
            namespaceprefix_ = self.AR_PACKAGE_MY_nsprefix_ + ':' if (UseCapturedNS_ and self.AR_PACKAGE_MY_nsprefix_) else ''
            AR_PACKAGE_MY_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AR-PACKAGE-MY', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ELEMENTS':
            obj_ = ELEMENTS.factory(parent_object_=self)
            obj_.build(child_)
            self.ELEMENTS.append(obj_)
            obj_.original_tagname_ = 'ELEMENTS'
        elif nodeName_ == 'SW-DATA-DEF-PROPS':
            obj_ = SW_DATA_DEF_PROPS.factory(parent_object_=self)
            obj_.build(child_)
            self.SW_DATA_DEF_PROPS.append(obj_)
            obj_.original_tagname_ = 'SW-DATA-DEF-PROPS'
        elif nodeName_ == 'TYPE-TREF':
            obj_ = TYPE_TREF.factory(parent_object_=self)
            obj_.build(child_)
            self.TYPE_TREF.append(obj_)
            obj_.original_tagname_ = 'TYPE-TREF'
        elif nodeName_ == 'AR-PACKAGE-MY':
            obj_ = AR_PACKAGE_MYType.factory(parent_object_=self)
            obj_.build(child_)
            self.AR_PACKAGE_MY.append(obj_)
            obj_.original_tagname_ = 'AR-PACKAGE-MY'
# end class AUTOSAR


class SENDER_RECEIVER_INTERFACEType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UUID=None, SHORT_NAME=None, DATA_ELEMENTS=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UUID = _cast(None, UUID)
        self.UUID_nsprefix_ = None
        self.SHORT_NAME = SHORT_NAME
        self.SHORT_NAME_nsprefix_ = None
        if DATA_ELEMENTS is None:
            self.DATA_ELEMENTS = []
        else:
            self.DATA_ELEMENTS = DATA_ELEMENTS
        self.DATA_ELEMENTS_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SENDER_RECEIVER_INTERFACEType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SENDER_RECEIVER_INTERFACEType.subclass:
            return SENDER_RECEIVER_INTERFACEType.subclass(*args_, **kwargs_)
        else:
            return SENDER_RECEIVER_INTERFACEType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SHORT_NAME(self):
        return self.SHORT_NAME
    def set_SHORT_NAME(self, SHORT_NAME):
        self.SHORT_NAME = SHORT_NAME
    def get_DATA_ELEMENTS(self):
        return self.DATA_ELEMENTS
    def set_DATA_ELEMENTS(self, DATA_ELEMENTS):
        self.DATA_ELEMENTS = DATA_ELEMENTS
    def add_DATA_ELEMENTS(self, value):
        self.DATA_ELEMENTS.append(value)
    def insert_DATA_ELEMENTS_at(self, index, value):
        self.DATA_ELEMENTS.insert(index, value)
    def replace_DATA_ELEMENTS_at(self, index, value):
        self.DATA_ELEMENTS[index] = value
    def get_UUID(self):
        return self.UUID
    def set_UUID(self, UUID):
        self.UUID = UUID
    def hasContent_(self):
        if (
            self.SHORT_NAME is not None or
            self.DATA_ELEMENTS
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='SENDER-RECEIVER-INTERFACEType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SENDER-RECEIVER-INTERFACEType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SENDER-RECEIVER-INTERFACEType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SENDER-RECEIVER-INTERFACEType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SENDER-RECEIVER-INTERFACEType'):
        if self.UUID is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            outfile.write(' UUID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.UUID), input_name='UUID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='SENDER-RECEIVER-INTERFACEType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SHORT_NAME is not None:
            namespaceprefix_ = self.SHORT_NAME_nsprefix_ + ':' if (UseCapturedNS_ and self.SHORT_NAME_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSHORT-NAME>%s</%sSHORT-NAME>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SHORT_NAME), input_name='SHORT-NAME')), namespaceprefix_ , eol_))
        for DATA_ELEMENTS_ in self.DATA_ELEMENTS:
            namespaceprefix_ = self.DATA_ELEMENTS_nsprefix_ + ':' if (UseCapturedNS_ and self.DATA_ELEMENTS_nsprefix_) else ''
            DATA_ELEMENTS_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DATA-ELEMENTS', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('UUID', node)
        if value is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            self.UUID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SHORT-NAME':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SHORT_NAME')
            value_ = self.gds_validate_string(value_, node, 'SHORT_NAME')
            self.SHORT_NAME = value_
            self.SHORT_NAME_nsprefix_ = child_.prefix
        elif nodeName_ == 'DATA-ELEMENTS':
            obj_ = DATA_ELEMENTSType.factory(parent_object_=self)
            obj_.build(child_)
            self.DATA_ELEMENTS.append(obj_)
            obj_.original_tagname_ = 'DATA-ELEMENTS'
# end class SENDER_RECEIVER_INTERFACEType


class DATA_ELEMENTSType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, VARIABLE_DATA_PROTOTYPE=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if VARIABLE_DATA_PROTOTYPE is None:
            self.VARIABLE_DATA_PROTOTYPE = []
        else:
            self.VARIABLE_DATA_PROTOTYPE = VARIABLE_DATA_PROTOTYPE
        self.VARIABLE_DATA_PROTOTYPE_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DATA_ELEMENTSType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DATA_ELEMENTSType.subclass:
            return DATA_ELEMENTSType.subclass(*args_, **kwargs_)
        else:
            return DATA_ELEMENTSType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_VARIABLE_DATA_PROTOTYPE(self):
        return self.VARIABLE_DATA_PROTOTYPE
    def set_VARIABLE_DATA_PROTOTYPE(self, VARIABLE_DATA_PROTOTYPE):
        self.VARIABLE_DATA_PROTOTYPE = VARIABLE_DATA_PROTOTYPE
    def add_VARIABLE_DATA_PROTOTYPE(self, value):
        self.VARIABLE_DATA_PROTOTYPE.append(value)
    def insert_VARIABLE_DATA_PROTOTYPE_at(self, index, value):
        self.VARIABLE_DATA_PROTOTYPE.insert(index, value)
    def replace_VARIABLE_DATA_PROTOTYPE_at(self, index, value):
        self.VARIABLE_DATA_PROTOTYPE[index] = value
    def hasContent_(self):
        if (
            self.VARIABLE_DATA_PROTOTYPE
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='DATA-ELEMENTSType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DATA-ELEMENTSType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DATA-ELEMENTSType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DATA-ELEMENTSType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DATA-ELEMENTSType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='DATA-ELEMENTSType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for VARIABLE_DATA_PROTOTYPE_ in self.VARIABLE_DATA_PROTOTYPE:
            namespaceprefix_ = self.VARIABLE_DATA_PROTOTYPE_nsprefix_ + ':' if (UseCapturedNS_ and self.VARIABLE_DATA_PROTOTYPE_nsprefix_) else ''
            VARIABLE_DATA_PROTOTYPE_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VARIABLE-DATA-PROTOTYPE', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'VARIABLE-DATA-PROTOTYPE':
            obj_ = VARIABLE_DATA_PROTOTYPEType.factory(parent_object_=self)
            obj_.build(child_)
            self.VARIABLE_DATA_PROTOTYPE.append(obj_)
            obj_.original_tagname_ = 'VARIABLE-DATA-PROTOTYPE'
# end class DATA_ELEMENTSType


class VARIABLE_DATA_PROTOTYPEType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UUID=None, SHORT_NAME=None, SW_DATA_DEF_PROPS=None, TYPE_TREF=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UUID = _cast(None, UUID)
        self.UUID_nsprefix_ = None
        self.SHORT_NAME = SHORT_NAME
        self.SHORT_NAME_nsprefix_ = None
        if SW_DATA_DEF_PROPS is None:
            self.SW_DATA_DEF_PROPS = []
        else:
            self.SW_DATA_DEF_PROPS = SW_DATA_DEF_PROPS
        self.SW_DATA_DEF_PROPS_nsprefix_ = None
        if TYPE_TREF is None:
            self.TYPE_TREF = []
        else:
            self.TYPE_TREF = TYPE_TREF
        self.TYPE_TREF_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VARIABLE_DATA_PROTOTYPEType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VARIABLE_DATA_PROTOTYPEType.subclass:
            return VARIABLE_DATA_PROTOTYPEType.subclass(*args_, **kwargs_)
        else:
            return VARIABLE_DATA_PROTOTYPEType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SHORT_NAME(self):
        return self.SHORT_NAME
    def set_SHORT_NAME(self, SHORT_NAME):
        self.SHORT_NAME = SHORT_NAME
    def get_SW_DATA_DEF_PROPS(self):
        return self.SW_DATA_DEF_PROPS
    def set_SW_DATA_DEF_PROPS(self, SW_DATA_DEF_PROPS):
        self.SW_DATA_DEF_PROPS = SW_DATA_DEF_PROPS
    def add_SW_DATA_DEF_PROPS(self, value):
        self.SW_DATA_DEF_PROPS.append(value)
    def insert_SW_DATA_DEF_PROPS_at(self, index, value):
        self.SW_DATA_DEF_PROPS.insert(index, value)
    def replace_SW_DATA_DEF_PROPS_at(self, index, value):
        self.SW_DATA_DEF_PROPS[index] = value
    def get_TYPE_TREF(self):
        return self.TYPE_TREF
    def set_TYPE_TREF(self, TYPE_TREF):
        self.TYPE_TREF = TYPE_TREF
    def add_TYPE_TREF(self, value):
        self.TYPE_TREF.append(value)
    def insert_TYPE_TREF_at(self, index, value):
        self.TYPE_TREF.insert(index, value)
    def replace_TYPE_TREF_at(self, index, value):
        self.TYPE_TREF[index] = value
    def get_UUID(self):
        return self.UUID
    def set_UUID(self, UUID):
        self.UUID = UUID
    def hasContent_(self):
        if (
            self.SHORT_NAME is not None or
            self.SW_DATA_DEF_PROPS or
            self.TYPE_TREF
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='VARIABLE-DATA-PROTOTYPEType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VARIABLE-DATA-PROTOTYPEType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VARIABLE-DATA-PROTOTYPEType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VARIABLE-DATA-PROTOTYPEType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VARIABLE-DATA-PROTOTYPEType'):
        if self.UUID is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            outfile.write(' UUID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.UUID), input_name='UUID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='VARIABLE-DATA-PROTOTYPEType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SHORT_NAME is not None:
            namespaceprefix_ = self.SHORT_NAME_nsprefix_ + ':' if (UseCapturedNS_ and self.SHORT_NAME_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSHORT-NAME>%s</%sSHORT-NAME>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SHORT_NAME), input_name='SHORT-NAME')), namespaceprefix_ , eol_))
        for SW_DATA_DEF_PROPS_ in self.SW_DATA_DEF_PROPS:
            namespaceprefix_ = self.SW_DATA_DEF_PROPS_nsprefix_ + ':' if (UseCapturedNS_ and self.SW_DATA_DEF_PROPS_nsprefix_) else ''
            SW_DATA_DEF_PROPS_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SW-DATA-DEF-PROPS', pretty_print=pretty_print)
        for TYPE_TREF_ in self.TYPE_TREF:
            namespaceprefix_ = self.TYPE_TREF_nsprefix_ + ':' if (UseCapturedNS_ and self.TYPE_TREF_nsprefix_) else ''
            TYPE_TREF_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TYPE-TREF', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('UUID', node)
        if value is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            self.UUID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SHORT-NAME':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SHORT_NAME')
            value_ = self.gds_validate_string(value_, node, 'SHORT_NAME')
            self.SHORT_NAME = value_
            self.SHORT_NAME_nsprefix_ = child_.prefix
        elif nodeName_ == 'SW-DATA-DEF-PROPS':
            obj_ = SW_DATA_DEF_PROPS.factory(parent_object_=self)
            obj_.build(child_)
            self.SW_DATA_DEF_PROPS.append(obj_)
            obj_.original_tagname_ = 'SW-DATA-DEF-PROPS'
        elif nodeName_ == 'TYPE-TREF':
            obj_ = TYPE_TREF.factory(parent_object_=self)
            obj_.build(child_)
            self.TYPE_TREF.append(obj_)
            obj_.original_tagname_ = 'TYPE-TREF'
# end class VARIABLE_DATA_PROTOTYPEType


class CLIENT_SERVER_INTERFACEType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UUID=None, SHORT_NAME=None, IS_SERVICE=None, SERVICE_KIND=None, OPERATIONS=None, POSSIBLE_ERRORS=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UUID = _cast(None, UUID)
        self.UUID_nsprefix_ = None
        self.SHORT_NAME = SHORT_NAME
        self.SHORT_NAME_nsprefix_ = None
        self.IS_SERVICE = IS_SERVICE
        self.IS_SERVICE_nsprefix_ = None
        self.SERVICE_KIND = SERVICE_KIND
        self.SERVICE_KIND_nsprefix_ = None
        if OPERATIONS is None:
            self.OPERATIONS = []
        else:
            self.OPERATIONS = OPERATIONS
        self.OPERATIONS_nsprefix_ = None
        if POSSIBLE_ERRORS is None:
            self.POSSIBLE_ERRORS = []
        else:
            self.POSSIBLE_ERRORS = POSSIBLE_ERRORS
        self.POSSIBLE_ERRORS_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CLIENT_SERVER_INTERFACEType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CLIENT_SERVER_INTERFACEType.subclass:
            return CLIENT_SERVER_INTERFACEType.subclass(*args_, **kwargs_)
        else:
            return CLIENT_SERVER_INTERFACEType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SHORT_NAME(self):
        return self.SHORT_NAME
    def set_SHORT_NAME(self, SHORT_NAME):
        self.SHORT_NAME = SHORT_NAME
    def get_IS_SERVICE(self):
        return self.IS_SERVICE
    def set_IS_SERVICE(self, IS_SERVICE):
        self.IS_SERVICE = IS_SERVICE
    def get_SERVICE_KIND(self):
        return self.SERVICE_KIND
    def set_SERVICE_KIND(self, SERVICE_KIND):
        self.SERVICE_KIND = SERVICE_KIND
    def get_OPERATIONS(self):
        return self.OPERATIONS
    def set_OPERATIONS(self, OPERATIONS):
        self.OPERATIONS = OPERATIONS
    def add_OPERATIONS(self, value):
        self.OPERATIONS.append(value)
    def insert_OPERATIONS_at(self, index, value):
        self.OPERATIONS.insert(index, value)
    def replace_OPERATIONS_at(self, index, value):
        self.OPERATIONS[index] = value
    def get_POSSIBLE_ERRORS(self):
        return self.POSSIBLE_ERRORS
    def set_POSSIBLE_ERRORS(self, POSSIBLE_ERRORS):
        self.POSSIBLE_ERRORS = POSSIBLE_ERRORS
    def add_POSSIBLE_ERRORS(self, value):
        self.POSSIBLE_ERRORS.append(value)
    def insert_POSSIBLE_ERRORS_at(self, index, value):
        self.POSSIBLE_ERRORS.insert(index, value)
    def replace_POSSIBLE_ERRORS_at(self, index, value):
        self.POSSIBLE_ERRORS[index] = value
    def get_UUID(self):
        return self.UUID
    def set_UUID(self, UUID):
        self.UUID = UUID
    def hasContent_(self):
        if (
            self.SHORT_NAME is not None or
            self.IS_SERVICE is not None or
            self.SERVICE_KIND is not None or
            self.OPERATIONS or
            self.POSSIBLE_ERRORS
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='CLIENT-SERVER-INTERFACEType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CLIENT-SERVER-INTERFACEType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CLIENT-SERVER-INTERFACEType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CLIENT-SERVER-INTERFACEType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CLIENT-SERVER-INTERFACEType'):
        if self.UUID is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            outfile.write(' UUID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.UUID), input_name='UUID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='CLIENT-SERVER-INTERFACEType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SHORT_NAME is not None:
            namespaceprefix_ = self.SHORT_NAME_nsprefix_ + ':' if (UseCapturedNS_ and self.SHORT_NAME_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSHORT-NAME>%s</%sSHORT-NAME>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SHORT_NAME), input_name='SHORT-NAME')), namespaceprefix_ , eol_))
        if self.IS_SERVICE is not None:
            namespaceprefix_ = self.IS_SERVICE_nsprefix_ + ':' if (UseCapturedNS_ and self.IS_SERVICE_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIS-SERVICE>%s</%sIS-SERVICE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IS_SERVICE), input_name='IS-SERVICE')), namespaceprefix_ , eol_))
        if self.SERVICE_KIND is not None:
            namespaceprefix_ = self.SERVICE_KIND_nsprefix_ + ':' if (UseCapturedNS_ and self.SERVICE_KIND_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSERVICE-KIND>%s</%sSERVICE-KIND>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SERVICE_KIND), input_name='SERVICE-KIND')), namespaceprefix_ , eol_))
        for OPERATIONS_ in self.OPERATIONS:
            namespaceprefix_ = self.OPERATIONS_nsprefix_ + ':' if (UseCapturedNS_ and self.OPERATIONS_nsprefix_) else ''
            OPERATIONS_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OPERATIONS', pretty_print=pretty_print)
        for POSSIBLE_ERRORS_ in self.POSSIBLE_ERRORS:
            namespaceprefix_ = self.POSSIBLE_ERRORS_nsprefix_ + ':' if (UseCapturedNS_ and self.POSSIBLE_ERRORS_nsprefix_) else ''
            POSSIBLE_ERRORS_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='POSSIBLE-ERRORS', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('UUID', node)
        if value is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            self.UUID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SHORT-NAME':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SHORT_NAME')
            value_ = self.gds_validate_string(value_, node, 'SHORT_NAME')
            self.SHORT_NAME = value_
            self.SHORT_NAME_nsprefix_ = child_.prefix
        elif nodeName_ == 'IS-SERVICE':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IS_SERVICE')
            value_ = self.gds_validate_string(value_, node, 'IS_SERVICE')
            self.IS_SERVICE = value_
            self.IS_SERVICE_nsprefix_ = child_.prefix
        elif nodeName_ == 'SERVICE-KIND':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SERVICE_KIND')
            value_ = self.gds_validate_string(value_, node, 'SERVICE_KIND')
            self.SERVICE_KIND = value_
            self.SERVICE_KIND_nsprefix_ = child_.prefix
        elif nodeName_ == 'OPERATIONS':
            obj_ = OPERATIONSType.factory(parent_object_=self)
            obj_.build(child_)
            self.OPERATIONS.append(obj_)
            obj_.original_tagname_ = 'OPERATIONS'
        elif nodeName_ == 'POSSIBLE-ERRORS':
            obj_ = POSSIBLE_ERRORSType.factory(parent_object_=self)
            obj_.build(child_)
            self.POSSIBLE_ERRORS.append(obj_)
            obj_.original_tagname_ = 'POSSIBLE-ERRORS'
# end class CLIENT_SERVER_INTERFACEType


class OPERATIONSType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CLIENT_SERVER_OPERATION=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if CLIENT_SERVER_OPERATION is None:
            self.CLIENT_SERVER_OPERATION = []
        else:
            self.CLIENT_SERVER_OPERATION = CLIENT_SERVER_OPERATION
        self.CLIENT_SERVER_OPERATION_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPERATIONSType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPERATIONSType.subclass:
            return OPERATIONSType.subclass(*args_, **kwargs_)
        else:
            return OPERATIONSType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CLIENT_SERVER_OPERATION(self):
        return self.CLIENT_SERVER_OPERATION
    def set_CLIENT_SERVER_OPERATION(self, CLIENT_SERVER_OPERATION):
        self.CLIENT_SERVER_OPERATION = CLIENT_SERVER_OPERATION
    def add_CLIENT_SERVER_OPERATION(self, value):
        self.CLIENT_SERVER_OPERATION.append(value)
    def insert_CLIENT_SERVER_OPERATION_at(self, index, value):
        self.CLIENT_SERVER_OPERATION.insert(index, value)
    def replace_CLIENT_SERVER_OPERATION_at(self, index, value):
        self.CLIENT_SERVER_OPERATION[index] = value
    def hasContent_(self):
        if (
            self.CLIENT_SERVER_OPERATION
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='OPERATIONSType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPERATIONSType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OPERATIONSType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OPERATIONSType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OPERATIONSType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='OPERATIONSType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CLIENT_SERVER_OPERATION_ in self.CLIENT_SERVER_OPERATION:
            namespaceprefix_ = self.CLIENT_SERVER_OPERATION_nsprefix_ + ':' if (UseCapturedNS_ and self.CLIENT_SERVER_OPERATION_nsprefix_) else ''
            CLIENT_SERVER_OPERATION_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CLIENT-SERVER-OPERATION', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CLIENT-SERVER-OPERATION':
            obj_ = CLIENT_SERVER_OPERATIONType.factory(parent_object_=self)
            obj_.build(child_)
            self.CLIENT_SERVER_OPERATION.append(obj_)
            obj_.original_tagname_ = 'CLIENT-SERVER-OPERATION'
# end class OPERATIONSType


class CLIENT_SERVER_OPERATIONType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UUID=None, SHORT_NAME=None, ARGUMENTS=None, POSSIBLE_ERROR_REFS=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UUID = _cast(None, UUID)
        self.UUID_nsprefix_ = None
        self.SHORT_NAME = SHORT_NAME
        self.SHORT_NAME_nsprefix_ = None
        if ARGUMENTS is None:
            self.ARGUMENTS = []
        else:
            self.ARGUMENTS = ARGUMENTS
        self.ARGUMENTS_nsprefix_ = None
        if POSSIBLE_ERROR_REFS is None:
            self.POSSIBLE_ERROR_REFS = []
        else:
            self.POSSIBLE_ERROR_REFS = POSSIBLE_ERROR_REFS
        self.POSSIBLE_ERROR_REFS_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CLIENT_SERVER_OPERATIONType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CLIENT_SERVER_OPERATIONType.subclass:
            return CLIENT_SERVER_OPERATIONType.subclass(*args_, **kwargs_)
        else:
            return CLIENT_SERVER_OPERATIONType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SHORT_NAME(self):
        return self.SHORT_NAME
    def set_SHORT_NAME(self, SHORT_NAME):
        self.SHORT_NAME = SHORT_NAME
    def get_ARGUMENTS(self):
        return self.ARGUMENTS
    def set_ARGUMENTS(self, ARGUMENTS):
        self.ARGUMENTS = ARGUMENTS
    def add_ARGUMENTS(self, value):
        self.ARGUMENTS.append(value)
    def insert_ARGUMENTS_at(self, index, value):
        self.ARGUMENTS.insert(index, value)
    def replace_ARGUMENTS_at(self, index, value):
        self.ARGUMENTS[index] = value
    def get_POSSIBLE_ERROR_REFS(self):
        return self.POSSIBLE_ERROR_REFS
    def set_POSSIBLE_ERROR_REFS(self, POSSIBLE_ERROR_REFS):
        self.POSSIBLE_ERROR_REFS = POSSIBLE_ERROR_REFS
    def add_POSSIBLE_ERROR_REFS(self, value):
        self.POSSIBLE_ERROR_REFS.append(value)
    def insert_POSSIBLE_ERROR_REFS_at(self, index, value):
        self.POSSIBLE_ERROR_REFS.insert(index, value)
    def replace_POSSIBLE_ERROR_REFS_at(self, index, value):
        self.POSSIBLE_ERROR_REFS[index] = value
    def get_UUID(self):
        return self.UUID
    def set_UUID(self, UUID):
        self.UUID = UUID
    def hasContent_(self):
        if (
            self.SHORT_NAME is not None or
            self.ARGUMENTS or
            self.POSSIBLE_ERROR_REFS
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='CLIENT-SERVER-OPERATIONType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CLIENT-SERVER-OPERATIONType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CLIENT-SERVER-OPERATIONType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CLIENT-SERVER-OPERATIONType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CLIENT-SERVER-OPERATIONType'):
        if self.UUID is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            outfile.write(' UUID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.UUID), input_name='UUID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='CLIENT-SERVER-OPERATIONType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SHORT_NAME is not None:
            namespaceprefix_ = self.SHORT_NAME_nsprefix_ + ':' if (UseCapturedNS_ and self.SHORT_NAME_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSHORT-NAME>%s</%sSHORT-NAME>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SHORT_NAME), input_name='SHORT-NAME')), namespaceprefix_ , eol_))
        for ARGUMENTS_ in self.ARGUMENTS:
            namespaceprefix_ = self.ARGUMENTS_nsprefix_ + ':' if (UseCapturedNS_ and self.ARGUMENTS_nsprefix_) else ''
            ARGUMENTS_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ARGUMENTS', pretty_print=pretty_print)
        for POSSIBLE_ERROR_REFS_ in self.POSSIBLE_ERROR_REFS:
            namespaceprefix_ = self.POSSIBLE_ERROR_REFS_nsprefix_ + ':' if (UseCapturedNS_ and self.POSSIBLE_ERROR_REFS_nsprefix_) else ''
            POSSIBLE_ERROR_REFS_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='POSSIBLE-ERROR-REFS', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('UUID', node)
        if value is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            self.UUID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SHORT-NAME':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SHORT_NAME')
            value_ = self.gds_validate_string(value_, node, 'SHORT_NAME')
            self.SHORT_NAME = value_
            self.SHORT_NAME_nsprefix_ = child_.prefix
        elif nodeName_ == 'ARGUMENTS':
            obj_ = ARGUMENTSType.factory(parent_object_=self)
            obj_.build(child_)
            self.ARGUMENTS.append(obj_)
            obj_.original_tagname_ = 'ARGUMENTS'
        elif nodeName_ == 'POSSIBLE-ERROR-REFS':
            obj_ = POSSIBLE_ERROR_REFSType.factory(parent_object_=self)
            obj_.build(child_)
            self.POSSIBLE_ERROR_REFS.append(obj_)
            obj_.original_tagname_ = 'POSSIBLE-ERROR-REFS'
# end class CLIENT_SERVER_OPERATIONType


class ARGUMENTSType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ARGUMENT_DATA_PROTOTYPE=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ARGUMENT_DATA_PROTOTYPE is None:
            self.ARGUMENT_DATA_PROTOTYPE = []
        else:
            self.ARGUMENT_DATA_PROTOTYPE = ARGUMENT_DATA_PROTOTYPE
        self.ARGUMENT_DATA_PROTOTYPE_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ARGUMENTSType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ARGUMENTSType.subclass:
            return ARGUMENTSType.subclass(*args_, **kwargs_)
        else:
            return ARGUMENTSType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ARGUMENT_DATA_PROTOTYPE(self):
        return self.ARGUMENT_DATA_PROTOTYPE
    def set_ARGUMENT_DATA_PROTOTYPE(self, ARGUMENT_DATA_PROTOTYPE):
        self.ARGUMENT_DATA_PROTOTYPE = ARGUMENT_DATA_PROTOTYPE
    def add_ARGUMENT_DATA_PROTOTYPE(self, value):
        self.ARGUMENT_DATA_PROTOTYPE.append(value)
    def insert_ARGUMENT_DATA_PROTOTYPE_at(self, index, value):
        self.ARGUMENT_DATA_PROTOTYPE.insert(index, value)
    def replace_ARGUMENT_DATA_PROTOTYPE_at(self, index, value):
        self.ARGUMENT_DATA_PROTOTYPE[index] = value
    def hasContent_(self):
        if (
            self.ARGUMENT_DATA_PROTOTYPE
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='ARGUMENTSType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ARGUMENTSType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ARGUMENTSType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ARGUMENTSType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ARGUMENTSType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='ARGUMENTSType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ARGUMENT_DATA_PROTOTYPE_ in self.ARGUMENT_DATA_PROTOTYPE:
            namespaceprefix_ = self.ARGUMENT_DATA_PROTOTYPE_nsprefix_ + ':' if (UseCapturedNS_ and self.ARGUMENT_DATA_PROTOTYPE_nsprefix_) else ''
            ARGUMENT_DATA_PROTOTYPE_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ARGUMENT-DATA-PROTOTYPE', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ARGUMENT-DATA-PROTOTYPE':
            obj_ = ARGUMENT_DATA_PROTOTYPEType.factory(parent_object_=self)
            obj_.build(child_)
            self.ARGUMENT_DATA_PROTOTYPE.append(obj_)
            obj_.original_tagname_ = 'ARGUMENT-DATA-PROTOTYPE'
# end class ARGUMENTSType


class ARGUMENT_DATA_PROTOTYPEType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UUID=None, SHORT_NAME=None, DIRECTION=None, SERVER_ARGUMENT_IMPL_POLICY=None, SW_DATA_DEF_PROPS=None, TYPE_TREF=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UUID = _cast(None, UUID)
        self.UUID_nsprefix_ = None
        self.SHORT_NAME = SHORT_NAME
        self.SHORT_NAME_nsprefix_ = None
        self.DIRECTION = DIRECTION
        self.DIRECTION_nsprefix_ = None
        self.SERVER_ARGUMENT_IMPL_POLICY = SERVER_ARGUMENT_IMPL_POLICY
        self.SERVER_ARGUMENT_IMPL_POLICY_nsprefix_ = None
        if SW_DATA_DEF_PROPS is None:
            self.SW_DATA_DEF_PROPS = []
        else:
            self.SW_DATA_DEF_PROPS = SW_DATA_DEF_PROPS
        self.SW_DATA_DEF_PROPS_nsprefix_ = None
        if TYPE_TREF is None:
            self.TYPE_TREF = []
        else:
            self.TYPE_TREF = TYPE_TREF
        self.TYPE_TREF_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ARGUMENT_DATA_PROTOTYPEType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ARGUMENT_DATA_PROTOTYPEType.subclass:
            return ARGUMENT_DATA_PROTOTYPEType.subclass(*args_, **kwargs_)
        else:
            return ARGUMENT_DATA_PROTOTYPEType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SHORT_NAME(self):
        return self.SHORT_NAME
    def set_SHORT_NAME(self, SHORT_NAME):
        self.SHORT_NAME = SHORT_NAME
    def get_DIRECTION(self):
        return self.DIRECTION
    def set_DIRECTION(self, DIRECTION):
        self.DIRECTION = DIRECTION
    def get_SERVER_ARGUMENT_IMPL_POLICY(self):
        return self.SERVER_ARGUMENT_IMPL_POLICY
    def set_SERVER_ARGUMENT_IMPL_POLICY(self, SERVER_ARGUMENT_IMPL_POLICY):
        self.SERVER_ARGUMENT_IMPL_POLICY = SERVER_ARGUMENT_IMPL_POLICY
    def get_SW_DATA_DEF_PROPS(self):
        return self.SW_DATA_DEF_PROPS
    def set_SW_DATA_DEF_PROPS(self, SW_DATA_DEF_PROPS):
        self.SW_DATA_DEF_PROPS = SW_DATA_DEF_PROPS
    def add_SW_DATA_DEF_PROPS(self, value):
        self.SW_DATA_DEF_PROPS.append(value)
    def insert_SW_DATA_DEF_PROPS_at(self, index, value):
        self.SW_DATA_DEF_PROPS.insert(index, value)
    def replace_SW_DATA_DEF_PROPS_at(self, index, value):
        self.SW_DATA_DEF_PROPS[index] = value
    def get_TYPE_TREF(self):
        return self.TYPE_TREF
    def set_TYPE_TREF(self, TYPE_TREF):
        self.TYPE_TREF = TYPE_TREF
    def add_TYPE_TREF(self, value):
        self.TYPE_TREF.append(value)
    def insert_TYPE_TREF_at(self, index, value):
        self.TYPE_TREF.insert(index, value)
    def replace_TYPE_TREF_at(self, index, value):
        self.TYPE_TREF[index] = value
    def get_UUID(self):
        return self.UUID
    def set_UUID(self, UUID):
        self.UUID = UUID
    def hasContent_(self):
        if (
            self.SHORT_NAME is not None or
            self.DIRECTION is not None or
            self.SERVER_ARGUMENT_IMPL_POLICY is not None or
            self.SW_DATA_DEF_PROPS or
            self.TYPE_TREF
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='ARGUMENT-DATA-PROTOTYPEType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ARGUMENT-DATA-PROTOTYPEType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ARGUMENT-DATA-PROTOTYPEType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ARGUMENT-DATA-PROTOTYPEType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ARGUMENT-DATA-PROTOTYPEType'):
        if self.UUID is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            outfile.write(' UUID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.UUID), input_name='UUID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='ARGUMENT-DATA-PROTOTYPEType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SHORT_NAME is not None:
            namespaceprefix_ = self.SHORT_NAME_nsprefix_ + ':' if (UseCapturedNS_ and self.SHORT_NAME_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSHORT-NAME>%s</%sSHORT-NAME>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SHORT_NAME), input_name='SHORT-NAME')), namespaceprefix_ , eol_))
        if self.DIRECTION is not None:
            namespaceprefix_ = self.DIRECTION_nsprefix_ + ':' if (UseCapturedNS_ and self.DIRECTION_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDIRECTION>%s</%sDIRECTION>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DIRECTION), input_name='DIRECTION')), namespaceprefix_ , eol_))
        if self.SERVER_ARGUMENT_IMPL_POLICY is not None:
            namespaceprefix_ = self.SERVER_ARGUMENT_IMPL_POLICY_nsprefix_ + ':' if (UseCapturedNS_ and self.SERVER_ARGUMENT_IMPL_POLICY_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSERVER-ARGUMENT-IMPL-POLICY>%s</%sSERVER-ARGUMENT-IMPL-POLICY>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SERVER_ARGUMENT_IMPL_POLICY), input_name='SERVER-ARGUMENT-IMPL-POLICY')), namespaceprefix_ , eol_))
        for SW_DATA_DEF_PROPS_ in self.SW_DATA_DEF_PROPS:
            namespaceprefix_ = self.SW_DATA_DEF_PROPS_nsprefix_ + ':' if (UseCapturedNS_ and self.SW_DATA_DEF_PROPS_nsprefix_) else ''
            SW_DATA_DEF_PROPS_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SW-DATA-DEF-PROPS', pretty_print=pretty_print)
        for TYPE_TREF_ in self.TYPE_TREF:
            namespaceprefix_ = self.TYPE_TREF_nsprefix_ + ':' if (UseCapturedNS_ and self.TYPE_TREF_nsprefix_) else ''
            TYPE_TREF_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TYPE-TREF', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('UUID', node)
        if value is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            self.UUID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SHORT-NAME':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SHORT_NAME')
            value_ = self.gds_validate_string(value_, node, 'SHORT_NAME')
            self.SHORT_NAME = value_
            self.SHORT_NAME_nsprefix_ = child_.prefix
        elif nodeName_ == 'DIRECTION':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DIRECTION')
            value_ = self.gds_validate_string(value_, node, 'DIRECTION')
            self.DIRECTION = value_
            self.DIRECTION_nsprefix_ = child_.prefix
        elif nodeName_ == 'SERVER-ARGUMENT-IMPL-POLICY':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SERVER_ARGUMENT_IMPL_POLICY')
            value_ = self.gds_validate_string(value_, node, 'SERVER_ARGUMENT_IMPL_POLICY')
            self.SERVER_ARGUMENT_IMPL_POLICY = value_
            self.SERVER_ARGUMENT_IMPL_POLICY_nsprefix_ = child_.prefix
        elif nodeName_ == 'SW-DATA-DEF-PROPS':
            obj_ = SW_DATA_DEF_PROPS.factory(parent_object_=self)
            obj_.build(child_)
            self.SW_DATA_DEF_PROPS.append(obj_)
            obj_.original_tagname_ = 'SW-DATA-DEF-PROPS'
        elif nodeName_ == 'TYPE-TREF':
            obj_ = TYPE_TREF.factory(parent_object_=self)
            obj_.build(child_)
            self.TYPE_TREF.append(obj_)
            obj_.original_tagname_ = 'TYPE-TREF'
# end class ARGUMENT_DATA_PROTOTYPEType


class POSSIBLE_ERROR_REFSType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, POSSIBLE_ERROR_REF=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if POSSIBLE_ERROR_REF is None:
            self.POSSIBLE_ERROR_REF = []
        else:
            self.POSSIBLE_ERROR_REF = POSSIBLE_ERROR_REF
        self.POSSIBLE_ERROR_REF_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, POSSIBLE_ERROR_REFSType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if POSSIBLE_ERROR_REFSType.subclass:
            return POSSIBLE_ERROR_REFSType.subclass(*args_, **kwargs_)
        else:
            return POSSIBLE_ERROR_REFSType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_POSSIBLE_ERROR_REF(self):
        return self.POSSIBLE_ERROR_REF
    def set_POSSIBLE_ERROR_REF(self, POSSIBLE_ERROR_REF):
        self.POSSIBLE_ERROR_REF = POSSIBLE_ERROR_REF
    def add_POSSIBLE_ERROR_REF(self, value):
        self.POSSIBLE_ERROR_REF.append(value)
    def insert_POSSIBLE_ERROR_REF_at(self, index, value):
        self.POSSIBLE_ERROR_REF.insert(index, value)
    def replace_POSSIBLE_ERROR_REF_at(self, index, value):
        self.POSSIBLE_ERROR_REF[index] = value
    def hasContent_(self):
        if (
            self.POSSIBLE_ERROR_REF
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='POSSIBLE-ERROR-REFSType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('POSSIBLE-ERROR-REFSType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='POSSIBLE-ERROR-REFSType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='POSSIBLE-ERROR-REFSType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='POSSIBLE-ERROR-REFSType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='POSSIBLE-ERROR-REFSType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for POSSIBLE_ERROR_REF_ in self.POSSIBLE_ERROR_REF:
            namespaceprefix_ = self.POSSIBLE_ERROR_REF_nsprefix_ + ':' if (UseCapturedNS_ and self.POSSIBLE_ERROR_REF_nsprefix_) else ''
            POSSIBLE_ERROR_REF_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='POSSIBLE-ERROR-REF', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'POSSIBLE-ERROR-REF':
            obj_ = POSSIBLE_ERROR_REFType.factory(parent_object_=self)
            obj_.build(child_)
            self.POSSIBLE_ERROR_REF.append(obj_)
            obj_.original_tagname_ = 'POSSIBLE-ERROR-REF'
# end class POSSIBLE_ERROR_REFSType


class POSSIBLE_ERROR_REFType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DEST=None, valueOf_=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DEST = _cast(None, DEST)
        self.DEST_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, POSSIBLE_ERROR_REFType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if POSSIBLE_ERROR_REFType.subclass:
            return POSSIBLE_ERROR_REFType.subclass(*args_, **kwargs_)
        else:
            return POSSIBLE_ERROR_REFType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DEST(self):
        return self.DEST
    def set_DEST(self, DEST):
        self.DEST = DEST
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0"', name_='POSSIBLE-ERROR-REFType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('POSSIBLE-ERROR-REFType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='POSSIBLE-ERROR-REFType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='POSSIBLE-ERROR-REFType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='POSSIBLE-ERROR-REFType'):
        if self.DEST is not None and 'DEST' not in already_processed:
            already_processed.add('DEST')
            outfile.write(' DEST=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DEST), input_name='DEST')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0"', name_='POSSIBLE-ERROR-REFType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DEST', node)
        if value is not None and 'DEST' not in already_processed:
            already_processed.add('DEST')
            self.DEST = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class POSSIBLE_ERROR_REFType


class POSSIBLE_ERRORSType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, APPLICATION_ERROR=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if APPLICATION_ERROR is None:
            self.APPLICATION_ERROR = []
        else:
            self.APPLICATION_ERROR = APPLICATION_ERROR
        self.APPLICATION_ERROR_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, POSSIBLE_ERRORSType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if POSSIBLE_ERRORSType.subclass:
            return POSSIBLE_ERRORSType.subclass(*args_, **kwargs_)
        else:
            return POSSIBLE_ERRORSType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_APPLICATION_ERROR(self):
        return self.APPLICATION_ERROR
    def set_APPLICATION_ERROR(self, APPLICATION_ERROR):
        self.APPLICATION_ERROR = APPLICATION_ERROR
    def add_APPLICATION_ERROR(self, value):
        self.APPLICATION_ERROR.append(value)
    def insert_APPLICATION_ERROR_at(self, index, value):
        self.APPLICATION_ERROR.insert(index, value)
    def replace_APPLICATION_ERROR_at(self, index, value):
        self.APPLICATION_ERROR[index] = value
    def hasContent_(self):
        if (
            self.APPLICATION_ERROR
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='POSSIBLE-ERRORSType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('POSSIBLE-ERRORSType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='POSSIBLE-ERRORSType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='POSSIBLE-ERRORSType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='POSSIBLE-ERRORSType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='POSSIBLE-ERRORSType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for APPLICATION_ERROR_ in self.APPLICATION_ERROR:
            namespaceprefix_ = self.APPLICATION_ERROR_nsprefix_ + ':' if (UseCapturedNS_ and self.APPLICATION_ERROR_nsprefix_) else ''
            APPLICATION_ERROR_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='APPLICATION-ERROR', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'APPLICATION-ERROR':
            obj_ = APPLICATION_ERRORType.factory(parent_object_=self)
            obj_.build(child_)
            self.APPLICATION_ERROR.append(obj_)
            obj_.original_tagname_ = 'APPLICATION-ERROR'
# end class POSSIBLE_ERRORSType


class APPLICATION_ERRORType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UUID=None, SHORT_NAME=None, ERROR_CODE=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UUID = _cast(None, UUID)
        self.UUID_nsprefix_ = None
        self.SHORT_NAME = SHORT_NAME
        self.SHORT_NAME_nsprefix_ = None
        self.ERROR_CODE = ERROR_CODE
        self.ERROR_CODE_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, APPLICATION_ERRORType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if APPLICATION_ERRORType.subclass:
            return APPLICATION_ERRORType.subclass(*args_, **kwargs_)
        else:
            return APPLICATION_ERRORType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SHORT_NAME(self):
        return self.SHORT_NAME
    def set_SHORT_NAME(self, SHORT_NAME):
        self.SHORT_NAME = SHORT_NAME
    def get_ERROR_CODE(self):
        return self.ERROR_CODE
    def set_ERROR_CODE(self, ERROR_CODE):
        self.ERROR_CODE = ERROR_CODE
    def get_UUID(self):
        return self.UUID
    def set_UUID(self, UUID):
        self.UUID = UUID
    def hasContent_(self):
        if (
            self.SHORT_NAME is not None or
            self.ERROR_CODE is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='APPLICATION-ERRORType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('APPLICATION-ERRORType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='APPLICATION-ERRORType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='APPLICATION-ERRORType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='APPLICATION-ERRORType'):
        if self.UUID is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            outfile.write(' UUID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.UUID), input_name='UUID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='APPLICATION-ERRORType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SHORT_NAME is not None:
            namespaceprefix_ = self.SHORT_NAME_nsprefix_ + ':' if (UseCapturedNS_ and self.SHORT_NAME_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSHORT-NAME>%s</%sSHORT-NAME>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SHORT_NAME), input_name='SHORT-NAME')), namespaceprefix_ , eol_))
        if self.ERROR_CODE is not None:
            namespaceprefix_ = self.ERROR_CODE_nsprefix_ + ':' if (UseCapturedNS_ and self.ERROR_CODE_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sERROR-CODE>%s</%sERROR-CODE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ERROR_CODE), input_name='ERROR-CODE')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('UUID', node)
        if value is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            self.UUID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SHORT-NAME':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SHORT_NAME')
            value_ = self.gds_validate_string(value_, node, 'SHORT_NAME')
            self.SHORT_NAME = value_
            self.SHORT_NAME_nsprefix_ = child_.prefix
        elif nodeName_ == 'ERROR-CODE':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ERROR_CODE')
            value_ = self.gds_validate_string(value_, node, 'ERROR_CODE')
            self.ERROR_CODE = value_
            self.ERROR_CODE_nsprefix_ = child_.prefix
# end class APPLICATION_ERRORType


class SW_DATA_DEF_PROPS_VARIANTSType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SW_DATA_DEF_PROPS_CONDITIONAL=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SW_DATA_DEF_PROPS_CONDITIONAL is None:
            self.SW_DATA_DEF_PROPS_CONDITIONAL = []
        else:
            self.SW_DATA_DEF_PROPS_CONDITIONAL = SW_DATA_DEF_PROPS_CONDITIONAL
        self.SW_DATA_DEF_PROPS_CONDITIONAL_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SW_DATA_DEF_PROPS_VARIANTSType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SW_DATA_DEF_PROPS_VARIANTSType.subclass:
            return SW_DATA_DEF_PROPS_VARIANTSType.subclass(*args_, **kwargs_)
        else:
            return SW_DATA_DEF_PROPS_VARIANTSType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SW_DATA_DEF_PROPS_CONDITIONAL(self):
        return self.SW_DATA_DEF_PROPS_CONDITIONAL
    def set_SW_DATA_DEF_PROPS_CONDITIONAL(self, SW_DATA_DEF_PROPS_CONDITIONAL):
        self.SW_DATA_DEF_PROPS_CONDITIONAL = SW_DATA_DEF_PROPS_CONDITIONAL
    def add_SW_DATA_DEF_PROPS_CONDITIONAL(self, value):
        self.SW_DATA_DEF_PROPS_CONDITIONAL.append(value)
    def insert_SW_DATA_DEF_PROPS_CONDITIONAL_at(self, index, value):
        self.SW_DATA_DEF_PROPS_CONDITIONAL.insert(index, value)
    def replace_SW_DATA_DEF_PROPS_CONDITIONAL_at(self, index, value):
        self.SW_DATA_DEF_PROPS_CONDITIONAL[index] = value
    def hasContent_(self):
        if (
            self.SW_DATA_DEF_PROPS_CONDITIONAL
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='SW-DATA-DEF-PROPS-VARIANTSType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SW-DATA-DEF-PROPS-VARIANTSType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SW-DATA-DEF-PROPS-VARIANTSType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SW-DATA-DEF-PROPS-VARIANTSType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SW-DATA-DEF-PROPS-VARIANTSType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='SW-DATA-DEF-PROPS-VARIANTSType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SW_DATA_DEF_PROPS_CONDITIONAL_ in self.SW_DATA_DEF_PROPS_CONDITIONAL:
            namespaceprefix_ = self.SW_DATA_DEF_PROPS_CONDITIONAL_nsprefix_ + ':' if (UseCapturedNS_ and self.SW_DATA_DEF_PROPS_CONDITIONAL_nsprefix_) else ''
            SW_DATA_DEF_PROPS_CONDITIONAL_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SW-DATA-DEF-PROPS-CONDITIONAL', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SW-DATA-DEF-PROPS-CONDITIONAL':
            obj_ = SW_DATA_DEF_PROPS_CONDITIONALType.factory(parent_object_=self)
            obj_.build(child_)
            self.SW_DATA_DEF_PROPS_CONDITIONAL.append(obj_)
            obj_.original_tagname_ = 'SW-DATA-DEF-PROPS-CONDITIONAL'
# end class SW_DATA_DEF_PROPS_VARIANTSType


class SW_DATA_DEF_PROPS_CONDITIONALType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SW_CALIBRATION_ACCESS=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SW_CALIBRATION_ACCESS = SW_CALIBRATION_ACCESS
        self.SW_CALIBRATION_ACCESS_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SW_DATA_DEF_PROPS_CONDITIONALType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SW_DATA_DEF_PROPS_CONDITIONALType.subclass:
            return SW_DATA_DEF_PROPS_CONDITIONALType.subclass(*args_, **kwargs_)
        else:
            return SW_DATA_DEF_PROPS_CONDITIONALType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SW_CALIBRATION_ACCESS(self):
        return self.SW_CALIBRATION_ACCESS
    def set_SW_CALIBRATION_ACCESS(self, SW_CALIBRATION_ACCESS):
        self.SW_CALIBRATION_ACCESS = SW_CALIBRATION_ACCESS
    def hasContent_(self):
        if (
            self.SW_CALIBRATION_ACCESS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='SW-DATA-DEF-PROPS-CONDITIONALType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SW-DATA-DEF-PROPS-CONDITIONALType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SW-DATA-DEF-PROPS-CONDITIONALType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SW-DATA-DEF-PROPS-CONDITIONALType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SW-DATA-DEF-PROPS-CONDITIONALType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='SW-DATA-DEF-PROPS-CONDITIONALType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SW_CALIBRATION_ACCESS is not None:
            namespaceprefix_ = self.SW_CALIBRATION_ACCESS_nsprefix_ + ':' if (UseCapturedNS_ and self.SW_CALIBRATION_ACCESS_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSW-CALIBRATION-ACCESS>%s</%sSW-CALIBRATION-ACCESS>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SW_CALIBRATION_ACCESS), input_name='SW-CALIBRATION-ACCESS')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SW-CALIBRATION-ACCESS':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SW_CALIBRATION_ACCESS')
            value_ = self.gds_validate_string(value_, node, 'SW_CALIBRATION_ACCESS')
            self.SW_CALIBRATION_ACCESS = value_
            self.SW_CALIBRATION_ACCESS_nsprefix_ = child_.prefix
# end class SW_DATA_DEF_PROPS_CONDITIONALType


class AR_PACKAGE_MYType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UUID=None, SHORT_NAME=None, ELEMENTS=None, AR_PACKAGES=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UUID = _cast(None, UUID)
        self.UUID_nsprefix_ = None
        self.SHORT_NAME = SHORT_NAME
        self.SHORT_NAME_nsprefix_ = None
        if ELEMENTS is None:
            self.ELEMENTS = []
        else:
            self.ELEMENTS = ELEMENTS
        self.ELEMENTS_nsprefix_ = None
        if AR_PACKAGES is None:
            self.AR_PACKAGES = []
        else:
            self.AR_PACKAGES = AR_PACKAGES
        self.AR_PACKAGES_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AR_PACKAGE_MYType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AR_PACKAGE_MYType.subclass:
            return AR_PACKAGE_MYType.subclass(*args_, **kwargs_)
        else:
            return AR_PACKAGE_MYType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SHORT_NAME(self):
        return self.SHORT_NAME
    def set_SHORT_NAME(self, SHORT_NAME):
        self.SHORT_NAME = SHORT_NAME
    def get_ELEMENTS(self):
        return self.ELEMENTS
    def set_ELEMENTS(self, ELEMENTS):
        self.ELEMENTS = ELEMENTS
    def add_ELEMENTS(self, value):
        self.ELEMENTS.append(value)
    def insert_ELEMENTS_at(self, index, value):
        self.ELEMENTS.insert(index, value)
    def replace_ELEMENTS_at(self, index, value):
        self.ELEMENTS[index] = value
    def get_AR_PACKAGES(self):
        return self.AR_PACKAGES
    def set_AR_PACKAGES(self, AR_PACKAGES):
        self.AR_PACKAGES = AR_PACKAGES
    def add_AR_PACKAGES(self, value):
        self.AR_PACKAGES.append(value)
    def insert_AR_PACKAGES_at(self, index, value):
        self.AR_PACKAGES.insert(index, value)
    def replace_AR_PACKAGES_at(self, index, value):
        self.AR_PACKAGES[index] = value
    def get_UUID(self):
        return self.UUID
    def set_UUID(self, UUID):
        self.UUID = UUID
    def hasContent_(self):
        if (
            self.SHORT_NAME is not None or
            self.ELEMENTS or
            self.AR_PACKAGES
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='AR-PACKAGE-MYType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AR-PACKAGE-MYType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AR-PACKAGE-MYType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AR-PACKAGE-MYType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AR-PACKAGE-MYType'):
        if self.UUID is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            outfile.write(' UUID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.UUID), input_name='UUID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='AR-PACKAGE-MYType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SHORT_NAME is not None:
            namespaceprefix_ = self.SHORT_NAME_nsprefix_ + ':' if (UseCapturedNS_ and self.SHORT_NAME_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSHORT-NAME>%s</%sSHORT-NAME>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SHORT_NAME), input_name='SHORT-NAME')), namespaceprefix_ , eol_))
        for ELEMENTS_ in self.ELEMENTS:
            namespaceprefix_ = self.ELEMENTS_nsprefix_ + ':' if (UseCapturedNS_ and self.ELEMENTS_nsprefix_) else ''
            ELEMENTS_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ELEMENTS', pretty_print=pretty_print)
        for AR_PACKAGES_ in self.AR_PACKAGES:
            namespaceprefix_ = self.AR_PACKAGES_nsprefix_ + ':' if (UseCapturedNS_ and self.AR_PACKAGES_nsprefix_) else ''
            AR_PACKAGES_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AR-PACKAGES', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('UUID', node)
        if value is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            self.UUID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SHORT-NAME':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SHORT_NAME')
            value_ = self.gds_validate_string(value_, node, 'SHORT_NAME')
            self.SHORT_NAME = value_
            self.SHORT_NAME_nsprefix_ = child_.prefix
        elif nodeName_ == 'ELEMENTS':
            obj_ = ELEMENTS.factory(parent_object_=self)
            obj_.build(child_)
            self.ELEMENTS.append(obj_)
            obj_.original_tagname_ = 'ELEMENTS'
        elif nodeName_ == 'AR-PACKAGES':
            obj_ = AR_PACKAGESType.factory(parent_object_=self)
            obj_.build(child_)
            self.AR_PACKAGES.append(obj_)
            obj_.original_tagname_ = 'AR-PACKAGES'
# end class AR_PACKAGE_MYType


class AR_PACKAGESType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AR_PACKAGE=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AR_PACKAGE is None:
            self.AR_PACKAGE = []
        else:
            self.AR_PACKAGE = AR_PACKAGE
        self.AR_PACKAGE_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AR_PACKAGESType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AR_PACKAGESType.subclass:
            return AR_PACKAGESType.subclass(*args_, **kwargs_)
        else:
            return AR_PACKAGESType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AR_PACKAGE(self):
        return self.AR_PACKAGE
    def set_AR_PACKAGE(self, AR_PACKAGE):
        self.AR_PACKAGE = AR_PACKAGE
    def add_AR_PACKAGE(self, value):
        self.AR_PACKAGE.append(value)
    def insert_AR_PACKAGE_at(self, index, value):
        self.AR_PACKAGE.insert(index, value)
    def replace_AR_PACKAGE_at(self, index, value):
        self.AR_PACKAGE[index] = value
    def hasContent_(self):
        if (
            self.AR_PACKAGE
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='AR-PACKAGESType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AR-PACKAGESType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AR-PACKAGESType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AR-PACKAGESType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AR-PACKAGESType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='AR-PACKAGESType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AR_PACKAGE_ in self.AR_PACKAGE:
            namespaceprefix_ = self.AR_PACKAGE_nsprefix_ + ':' if (UseCapturedNS_ and self.AR_PACKAGE_nsprefix_) else ''
            AR_PACKAGE_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AR-PACKAGE', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AR-PACKAGE':
            obj_ = AR_PACKAGEType.factory(parent_object_=self)
            obj_.build(child_)
            self.AR_PACKAGE.append(obj_)
            obj_.original_tagname_ = 'AR-PACKAGE'
# end class AR_PACKAGESType


class AR_PACKAGEType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UUID=None, SHORT_NAME=None, ELEMENTS=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UUID = _cast(None, UUID)
        self.UUID_nsprefix_ = None
        self.SHORT_NAME = SHORT_NAME
        self.SHORT_NAME_nsprefix_ = None
        if ELEMENTS is None:
            self.ELEMENTS = []
        else:
            self.ELEMENTS = ELEMENTS
        self.ELEMENTS_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AR_PACKAGEType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AR_PACKAGEType.subclass:
            return AR_PACKAGEType.subclass(*args_, **kwargs_)
        else:
            return AR_PACKAGEType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SHORT_NAME(self):
        return self.SHORT_NAME
    def set_SHORT_NAME(self, SHORT_NAME):
        self.SHORT_NAME = SHORT_NAME
    def get_ELEMENTS(self):
        return self.ELEMENTS
    def set_ELEMENTS(self, ELEMENTS):
        self.ELEMENTS = ELEMENTS
    def add_ELEMENTS(self, value):
        self.ELEMENTS.append(value)
    def insert_ELEMENTS_at(self, index, value):
        self.ELEMENTS.insert(index, value)
    def replace_ELEMENTS_at(self, index, value):
        self.ELEMENTS[index] = value
    def get_UUID(self):
        return self.UUID
    def set_UUID(self, UUID):
        self.UUID = UUID
    def hasContent_(self):
        if (
            self.SHORT_NAME is not None or
            self.ELEMENTS
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='AR-PACKAGEType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AR-PACKAGEType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AR-PACKAGEType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AR-PACKAGEType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AR-PACKAGEType'):
        if self.UUID is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            outfile.write(' UUID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.UUID), input_name='UUID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0" xmlns:None="http://autosar.org/schema/r4.0" ', name_='AR-PACKAGEType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SHORT_NAME is not None:
            namespaceprefix_ = self.SHORT_NAME_nsprefix_ + ':' if (UseCapturedNS_ and self.SHORT_NAME_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSHORT-NAME>%s</%sSHORT-NAME>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SHORT_NAME), input_name='SHORT-NAME')), namespaceprefix_ , eol_))
        for ELEMENTS_ in self.ELEMENTS:
            namespaceprefix_ = self.ELEMENTS_nsprefix_ + ':' if (UseCapturedNS_ and self.ELEMENTS_nsprefix_) else ''
            ELEMENTS_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ELEMENTS', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('UUID', node)
        if value is not None and 'UUID' not in already_processed:
            already_processed.add('UUID')
            self.UUID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SHORT-NAME':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SHORT_NAME')
            value_ = self.gds_validate_string(value_, node, 'SHORT_NAME')
            self.SHORT_NAME = value_
            self.SHORT_NAME_nsprefix_ = child_.prefix
        elif nodeName_ == 'ELEMENTS':
            obj_ = ELEMENTS.factory(parent_object_=self)
            obj_.build(child_)
            self.ELEMENTS.append(obj_)
            obj_.original_tagname_ = 'ELEMENTS'
# end class AR_PACKAGEType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=True):
    global CapturedNsmap_
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ELEMENTS'
        rootClass = ELEMENTS
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ELEMENTS'
        rootClass = ELEMENTS
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ELEMENTS'
        rootClass = ELEMENTS
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:mstns="http://autosar.org/schema/r4.0"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ELEMENTS'
        rootClass = ELEMENTS
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from PortInterfaces_api import *\n\n')
        sys.stdout.write('import PortInterfaces_api as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj

def saveToFile(mainlist):
    df = pd.DataFrame(mainlist)
    #print(df)
    df.to_excel('PortInterfaces.xls',sheet_name="PortInterface",encoding='utf-8',index=False)

def myhandler(o):
    alllist = []
    for item in o.AR_PACKAGE_MY[1].ELEMENTS[0].get_SENDER_RECEIVER_INTERFACE():
        #print(item.SHORT_NAME)
        for dataelement in item.DATA_ELEMENTS[0].get_VARIABLE_DATA_PROTOTYPE():
            tempdict = {}  # 需要放在循环体内容，否则append时候会被覆盖为最后一个值
            tempdict['InterfaceName'] = item.SHORT_NAME
            tempdict['ElementName'] = dataelement.SHORT_NAME
            tempdict['ElementType'] = dataelement.TYPE_TREF[0].valueOf_.split("/")[-1]
            #print(dataelement.SHORT_NAME)
            #print(dataelement.TYPE_TREF[0].valueOf_.split("/")[-1])
            #alllist.append(dict(**PPdict1, **PPdict2))  # 合并2个dict
            alllist.append(tempdict)
    #saveToFile(alllist)
    return (alllist)

def portInterfaceXMLgen(filename):
    portInterfaceObj = parse(filename)
    return(myhandler(portInterfaceObj))

def main():
    args = sys.argv[1:]
    if len(args) == 1:
        myrootObj = parse(args[0])
        myhandler(myrootObj)
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

__all__ = [
    "APPLICATION_ERRORType",
    "ARGUMENTSType",
    "ARGUMENT_DATA_PROTOTYPEType",
    "AR_PACKAGESType",
    "AR_PACKAGEType",
    "AR_PACKAGE_MYType",
    "AUTOSAR",
    "CLIENT_SERVER_INTERFACEType",
    "CLIENT_SERVER_OPERATIONType",
    "DATA_ELEMENTSType",
    "ELEMENTS",
    "OPERATIONSType",
    "POSSIBLE_ERRORSType",
    "POSSIBLE_ERROR_REFSType",
    "POSSIBLE_ERROR_REFType",
    "SENDER_RECEIVER_INTERFACEType",
    "SW_DATA_DEF_PROPS",
    "SW_DATA_DEF_PROPS_CONDITIONALType",
    "SW_DATA_DEF_PROPS_VARIANTSType",
    "TYPE_TREF",
    "VARIABLE_DATA_PROTOTYPEType"
]
